const { Account } = require("@tonclient/appkit");
const {
    signerKeys,
    TonClient,
    MessageBodyType,
} = require("@tonclient/core");

const { libNode } = require("@tonclient/lib-node");

TonClient.useBinaryLibrary(libNode);

const { HelloEventsContract } = require("./contracts");

function decodeText(hex) {
    return Buffer.from(hex, "hex").toString();
}


function encodeText(text) {
    return Buffer.from(text).toString("hex");
}


class HelloEvents extends Account {
    constructor(options) {
        super(HelloEventsContract, options);
    }

    /**
     * @param client {TonClient}
     * @param text {string}
     * @returns {Promise<HelloEvents>}
     */
    static async deployNew(client, text) {
        const keys = await client.crypto.generate_random_sign_keys();
        const account = new HelloEvents({ signer: signerKeys(keys), client });
        await account.deploy({
            initInput: {
                text: encodeText(text),
            },
            useGiver: true,
        });
        return account;
    }

    /**
     *
     * @param text {string}
     * @returns {Promise<void>}
     */
    async setHelloText(text) {
        await this.run("setHelloText", {
            text: encodeText(text),
        });
    }

    /**
     *
     * @returns {Promise<string>}
     */
    async getHelloText() {
        const { decoded } = await this.runLocal("getHelloText", {});
        return decodeText(decoded.output.text);
    }
}

(async () => {
    const client = new TonClient({ network: { endpoints: ["http://localhost"] } });
    try {

        const hello = await HelloEvents.deployNew(client, "Hello World!");
        console.log(`Initial hello text is "${await hello.getHelloText()}"`);

        await hello.subscribeAccount("balance", (acc) => {
            console.log("Account has updated. Current balance is ", parseInt(acc.balance));
        });

        await hello.subscribeMessages("boc", async (msg) => {
            try {
                const decoded = await hello.decodeMessage(msg.boc);
                switch (decoded.body_type) {
                    // Message that triggered an on-chain contract call
                case MessageBodyType.Input:
                    if (decoded.name === "setHelloText") {
                        decoded.value.text = decodeText(decoded.value.text);
                    }
                    console.log(`External inbound message, function "${decoded.name}", parameters: `, JSON.stringify(decoded.value));
                    break;
                    // External outbound message generated by a function's `return`
                case MessageBodyType.Output:
                    if (decoded.name === "setHelloText") {
                        decoded.value.oldText = decodeText(decoded.value.text);
                    }
                    console.log(`External outbound message, function "${decoded.name}", result`, JSON.stringify(decoded.value));
                    break;
                    // Event generated by the contract
                case MessageBodyType.Event:
                    if (decoded.name === "TextUpdated") {
                        decoded.value.text = decodeText(decoded.value.text);
                    }
                    console.log(`External outbound message, event "${decoded.name}", parameters`, JSON.stringify(decoded.value));
                    break;
                }
            } catch (err) {
            }
        });

        await hello.setHelloText("Hello there!");
        console.log(`Updated hello text is ${await hello.getHelloText()}`);

        /** Free up all internal resources associated with wallets. */
        await hello.free();
    } catch (error) {
        if (error.code === 504) {
            console.error(`Network is inaccessible. You have to start TON OS SE using \`tondev se start\`.\n If you run SE on another port or ip, replace http://localhost endpoint with http://localhost:port or http://ip:port in index.js file.`);
        } else {
            console.error(error);
        }
    }
    client.close();
    process.exit(0);
})();
